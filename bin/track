#!/usr/bin/env ruby
Dir.chdir("#{File.dirname(__FILE__)}/../")

require 'optparse'
require 'rubygems'
require 'chronic'
require 'lib/track'
require 'lib/repeater_day_portion'

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: track [date range] [options]"

  opts.on("-h", "--help", "Show this message") do
    puts opts
    exit
  end

  opts.separator ""
  opts.separator "Mode options:"

  opts.on("-u", "--until [UNTIL]", "Specifies an overriding end date for the date range") do |finish|
    finish = Chronic.parse(finish, :guess => false)
    if finish.nil?
      puts "Until date argument did not parse correctly."
      exit 1
    end
    options[:until] = finish.last
  end

  opts.on("-s", "--subject [SUBJECT]", "The subject of the event. This parameter tells track to add a new event.") do |subject|
    options[:subject] = subject
    options[:add_event] = true
  end

  opts.on("-l", "--list [NUMEVENTS]", "List a specified number of events") do |number| 
    options[:number_of_events] = number.to_i
  end

  opts.on("-d", "--delete", "Delete any events where the start date falls within the date range") do 
    options[:delete_events] = true
  end

  opts.separator ""
  opts.separator "The date parameter can be in many different formats. Examples:"
  opts.separator "  27/03/2009 13:00  # will have a default duration of one hour unless --until is used"
  opts.separator "  next tuesday      # next Tuesday, 07:00 - 23:00"
  opts.separator "  this evening      # next Saturday, 18:00 - 22:00"
  opts.separator "  aug               # 1st August 07:00 to 31st August 23:00 of this year"
end.parse!

OptionParser.new do |opts|
  opts.on(ARGV[0], "The date to view or set") do
    unless ARGV.empty?
      range = Chronic.parse(ARGV.join(" "), :guess => false)
      if range.nil?
        puts "Date argument did not parse correctly."
        exit 1
      end
      if options[:until]
        if options[:until] < range.first
          puts "The end date cannot be before the start date."
          exit 1
        end
        options[:range] = range.first...options[:until]
      else
        options[:range] = range
      end
    end
  end
end.parse

if options[:add_event] and options[:delete_events]
  puts "You cannot add an event and delete events at the same time."
  exit 1
end


track_dir = "#{ENV['HOME']}/.track"

unless File.exist?(track_dir)
  Dir.mkdir track_dir
end

track = Track.new("#{track_dir}/calendar")
if options[:add_event]
  track.add_event(options[:range], options[:subject])
elsif options[:delete_events]
  track.delete_events(options[:range])
else
  output = track.view_events(options[:range], options[:number_of_events])
  puts output unless output.empty?
end
